

actor SPOS 10 #M_MSHOT_M1
{
	callback OnCreate {
		levstat_monsters_max = levstat_monsters_max + 1;
		collision_set 10;
		hitbox_on;
		health = 60;
		timer_attack = 1000;
		->Idle;
	}

	callback OnDamage {
		if( damage > 0 )
		{
			health -= damage;
			timer_attack = 172 + rand();
			if( health <= 0 )
			{
				damage = 0;
				hitbox_off;
				->Die;
			}
			if( damage >= 15 )
			{
				damage = 0;
				->Pain;
			}

			damage = 0;
			if( rand() & 1 )
				->ShortPain;
		}
	}

	func IdleWatch {
		if( timer_walk <= 0 )
		{
			//TBD: timer_walk = 1000 + rand();
			timer_attack = 300;
			->Walk;
		}
	}
	
	func HuntWalk {
		if( timer_attack<=0 )
		{
			vector_aim;
			vector_distance;

			//if( rand() & 1 )
			//{
				if( vector_hitscan() )
					->Shoot;
				else
					timer_attack = (172 + rand())>>1;	// 300 +/- 128
			//}
			//else
			//	timer_attack = (172 + rand())>>1;		// 300 +/- 128
		}

		if( timer_walk <= 0 )
		{
			vector_aim;
			vector_distance;

			if( distance >= 128 )
			{
				if( rand() & 1 )
				{
					if( rand() & 1 )	vector_align 256,  256;
					else				vector_align 256, -256;
				}
			}
			else
			{
				if( rand() & 1 )	vector_align -256,  256;
				else				vector_align -256, -256;
			}

			if( skill < 4 )
				move_walk 8, rand() + 300;
			else
				move_walk 16, rand() + 100;
		}
	}

	func Fire {
		vector_aim;
		if( vector_hitscan() )
		{
			vector_distance;
			if( distance < 64 )
				distance = 64;

			// damage player
			sound $DSSHOTGN 200;
			player_damaged ((rand()&7)+1)*800 / distance;
		}
	}

	state Idle {
		frame #M_MSHOT_I1;	IdleWatch;	delay 96;
	}
		
	state Walk {
		frame #M_MSHOT_M1;	HuntWalk;	delay 48;
		frame #M_MSHOT_M2;	HuntWalk;	delay 48;
		frame #M_MSHOT_M3;	HuntWalk;	delay 48;
		frame #M_MSHOT_M4;	HuntWalk;	delay 48;
	}

	state Shoot {
		move_stop;	timer_walk = 0;
		if( skill < 4 )
		{
			frame #M_MSHOT_I1;			delay 220;
			frame #M_MSHOT_F1;	Fire;	delay 30;
			frame #M_MSHOT_F2;			delay 24;
			timer_attack = 172 + distance + rand();
		}
		else
		{
			frame #M_MSHOT_I1;			delay 120;
			frame #M_MSHOT_F1;	Fire;	delay 30;
			frame #M_MSHOT_F2;			delay 24;
			timer_attack = 0;
		}
		->Walk;
	}

	state Pain {
		move_stop;
		sound $DSPOPAIN 200;
		frame #M_MSHOT_H1;	delay 66;
		frame #M_MSHOT_H2;	delay 24;
		->Walk;
	}
	state ShortPain {
		sound $DSPOPAIN3 150;
		frame #M_MSHOT_H1;	delay 36;
		frame #M_MSHOT_H2;	delay 24;
		->Walk;
	}
	state Die {
		move_stop;
		sound $DSPODTH1 200;
		frame #M_MSHOT_D1;	delay 30;
		frame #M_MSHOT_D2;	delay 30;
		frame #M_MSHOT_D3;	delay 30;
		frame #M_MSHOT_D4;	delay 30;
		frame #M_MSHOT_D5;	delay 30;
		levstat_monsters = levstat_monsters + 1;
		->Dead;
	}
	state Dead {
		move_stop;
		collision_off;
		hitbox_off;
		frame #M_MSHOT_DD;
		if( skill >= 4 )
		{
			// vector_set_timer 11400 + 7800*(rand() - rand());	// triangular distribution, average 38 seconds, range 12..64
			vector_set_timer 11400;	// 38 seconds
			->WaitRespawn;
		}
		delay 5000;
	}
	state WaitRespawn {
		if( vector_get_timer() <= 0 )
		{
			// Respawn
			sound $DSRESP1 200;
			frame #M_MSHOT_D5;	delay 48;
			frame #M_MSHOT_D4;	delay 48;
			frame #M_MSHOT_D3;	delay 48;
			frame #M_MSHOT_D2;	delay 48;
			frame #M_MSHOT_D1;	delay 48;
		
			collision_set 10;
			hitbox_on;
			health = 60;
			timer_attack = 1000;
			->Idle;
		}
		delay 300;
	}
}
